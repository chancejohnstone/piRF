plot(x = coverage[[2]], y = alpha_vec/2, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[1]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[2]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
#undercoverage for qunatile and Zhang because one sided intervals not currently implemented...
plot(x = coverage[[1]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[2]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[3]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
coverage[[i]]
coverage[[1]]
test_mat
coverage[[1]]
dim(test_mat)
int[[1]]
alpha_vec <- seq(.01,.99,length.out = 33)
k <- 1:100
method_vec <- c("Zhang", "quantile", "Romano")
int <- vector(mode = "list", length = length(method_vec))
for(m in 1:length(int)){
int[[m]] <- matrix(0, nrow = length(k), ncol = length(alpha_vec))
}
track <- 1
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
res <- piRF::rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha, method = method_vec)
for(j in 1:length(method_vec)){
int[[j]][,track] <- unlist(res$int[[j]][,2])
}
track <- track + 1
}
#need to check actual coverage with intervals generated
probs <- list()
coverage <- list()
for(j in 1:length(method_vec)){
thresh <- -0.5
alpha_mat <- matrix(alpha_vec, ncol = length(alpha_vec), nrow = length(k), byrow = TRUE)
keep <- int[[j]] <= thresh
keep_val <- keep*alpha_mat
keep_val[keep_val == 0] = 1.1
probs[[j]] <- 1 - apply(keep_val, FUN = min, MARGIN = 1)
test_mat <- matrix(test2$resp, nrow = nrow(test2), ncol = length(alpha_vec))
coverage[[j]] <- apply(test_mat > int[[j]], FUN = mean, MARGIN = 2)
}
#undercoverage for qunatile and Zhang because one sided intervals not currently implemented...
plot(x = coverage[[1]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[2]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[3]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
int
length(alpha_vec)
track
res
lint
int
int[[1]]
alpha_vec
track
length(method_vec)
alph
alpha
track <- 1
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
res <- piRF::rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha, method = method_vec)
for(j in 1:length(method_vec)){
int[[j]][,track] <- unlist(res$int[[j]][,2])
}
track <- track + 1
print(alpha)
}
#checking calibration of probabilities...
#insert code here...
#one sided for freesolv data
alpha_vec <- seq(.01,.48,length.out = 33)
k <- 1:100
method_vec <- c("Zhang", "quantile", "Romano")
int <- vector(mode = "list", length = length(method_vec))
for(m in 1:length(int)){
int[[m]] <- matrix(0, nrow = length(k), ncol = length(alpha_vec))
}
track <- 1
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
res <- piRF::rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha, method = method_vec)
for(j in 1:length(method_vec)){
int[[j]][,track] <- unlist(res$int[[j]][,2])
}
track <- track + 1
print(alpha)
}
#need to check actual coverage with intervals generated
probs <- list()
coverage <- list()
for(j in 1:length(method_vec)){
thresh <- -0.5
alpha_mat <- matrix(alpha_vec, ncol = length(alpha_vec), nrow = length(k), byrow = TRUE)
keep <- int[[j]] <= thresh
keep_val <- keep*alpha_mat
keep_val[keep_val == 0] = 1.1
probs[[j]] <- 1 - apply(keep_val, FUN = min, MARGIN = 1)
test_mat <- matrix(test2$resp, nrow = nrow(test2), ncol = length(alpha_vec))
coverage[[j]] <- apply(test_mat > int[[j]], FUN = mean, MARGIN = 2)
}
#undercoverage for qunatile and Zhang because one sided intervals not currently implemented...
plot(x = coverage[[1]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[2]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[3]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
library(rfinterval)
?rfinterval
library(devtools)
document()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
library(rcdk)
library(piRF)
#physical checmistry MoleculeNet datasets
lipo <- read.csv("C:/Users/thechanceyman/Documents/Research/Data/Drug Design/lipophilicity/Lipophilicity.csv")
esol <- read.csv("C:/Users/thechanceyman/Documents/Research/Data/Drug Design/ESOL/esol.csv")
freesolv <- read.csv("C:/Users/thechanceyman/Documents/Research/Data/Drug Design/FreeSolv/freesolv.csv")
#combine data
all_data <- list(lipo, freesolv, esol)
names(all_data[[1]])[2] <- "resp"
names(all_data[[3]])[9] <- "resp"
names(all_data[[2]])[4] <- "resp"
#type <- c("lower", "lower", "upper")
type <- c("two-sided", "two-sided", "two-sided")
res <- cov_color <- test <- list()
#par(mfrow = c(3,1))
for(i in 1:length(all_data)){
bit_mat <- convert_smiles(all_data[[i]]$smiles)
#data frame form
data <- cbind(all_data[[i]]$resp, bit_mat)
names(data)[1] <- "resp"
set.seed(2020)
n <- nrow(data)
ratio <- .975
samp <- sample(1:n, ratio*n)
train <- data[samp,]
test[[i]] <- data[-samp,]
res[[i]] <- rfint(resp~., train_data = train, test_data = test[[i]], concise = FALSE, interval_type = type[i])
cov_color[[i]] <- (test[[i]]$resp <= res[[i]]$int[[1]][,2])*(test[[i]]$resp>= res[[i]]$int[[1]][,1])
}
for(i in 1:length(all_data)){
#changing to color
range_pred <- range(res[[i]]$int)
range_true <- range(test[[i]]$resp)
lim <- .5
cov_color[[i]][cov_color[[i]] == 1] <- "black"
cov_color[[i]][cov_color[[i]] == 0] <- "red"
p_color <- rep("black", times = nrow(test[[i]]))
p_color[res[[i]]$int[[1]][,1] > lim] <- "skyblue"
#segments
#plotting intervals vs true
plot(x = res[[i]]$preds[[1]], y = test[[i]]$resp, pch = 20,
ylab = "true", xlab = "predicted", ylim = range_true, xlim = range_pred)
abline(a = 0, b = 1)
segments(x0 = res[[i]]$int[[1]][,1], x1 = res[[i]]$int[[1]][,2],
y1 = test[[i]]$resp, y0 = test[[i]]$resp,
col = cov_color[[i]], lwd = .5)
}
#points(x = res$preds[[1]], y = test$lipo, pch = 20, col = p_color)
#one sided for freesolv data
alpha_vec <- seq(.01,.99,length.out = 33)
int <- rep(0, times = 2*length(alpha_vec))
dim(int) <- c(length(alpha_vec), 2)
track <- 1
k <- 5
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
int[track,] <- unlist(rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha)$int$Zhang)
track <- track + 1
}
int[,1] <- -100
plot(x = int[,2], y = 1-alpha_vec, pch = 20,
ylab = expression((1-alpha)), xlab = "upper one-sided interval", ylim = c(0,1), xlim = c(-3,3))
segments(x0 = int[,1], x1 = int[,2],
y1 = 1-alpha_vec, y0 = 1-alpha_vec,
lwd = .5)
abline(v = -.5, lty = 2, col = "red")
#checking calibration of probabilities...
#insert code here...
#one sided for freesolv data
alpha_vec <- seq(.01,.48,length.out = 33)
k <- 1:100
method_vec <- c("Zhang", "quantile", "Romano")
int <- vector(mode = "list", length = length(method_vec))
for(m in 1:length(int)){
int[[m]] <- matrix(0, nrow = length(k), ncol = length(alpha_vec))
}
track <- 1
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
res <- piRF::rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha, method = method_vec)
for(j in 1:length(method_vec)){
int[[j]][,track] <- unlist(res$int[[j]][,2])
}
track <- track + 1
print(alpha)
}
#need to check actual coverage with intervals generated
probs <- list()
coverage <- list()
for(j in 1:length(method_vec)){
thresh <- -0.5
alpha_mat <- matrix(alpha_vec, ncol = length(alpha_vec), nrow = length(k), byrow = TRUE)
keep <- int[[j]] <= thresh
keep_val <- keep*alpha_mat
keep_val[keep_val == 0] = 1.1
probs[[j]] <- 1 - apply(keep_val, FUN = min, MARGIN = 1)
test_mat <- matrix(test2$resp, nrow = nrow(test2), ncol = length(alpha_vec))
coverage[[j]] <- apply(test_mat > int[[j]], FUN = mean, MARGIN = 2)
}
#undercoverage for qunatile and Zhang because one sided intervals not currently implemented...
#method for changing to one sided interval is flawed.
plot(x = coverage[[1]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[2]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[3]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
#moleculenet data
getbitstring <- function(x, num_bits = 1024){
bits <- attributes(x)$bits
bit_string <- rep(0, times = num_bits)
bit_string[bits] <- 1
return(bit_string)
}
#convert molecule in SMILES format to molecular fingerprint
convert_smiles <- function(molecule, num_bits = 1024){
sp <- get.smiles.parser()
smiles <- sapply(molecule, FUN = as.character, MARGIN = 1)
mols <- unlist(lapply(smiles, FUN = parse.smiles))
#get fingerprint for molecule' default is ECFP4
em_data <- lapply(mols, FUN = get.fingerprint)
#get list of embeddings
bit_string <- lapply(em_data, FUN = getbitstring)
bit_mat <- unlist(bit_string)
dim(bit_mat) <- c(num_bits, length(smiles))
#1024 dimensional matrix: rows are molecules, cols are bit embeddings
bit_mat <- t(bit_mat)
#matrix form
bit_mat <- as.data.frame(bit_mat)
return(bit_mat)
}
library(rcdk)
library(piRF)
#physical checmistry MoleculeNet datasets
lipo <- read.csv("C:/Users/thechanceyman/Documents/Research/Data/Drug Design/lipophilicity/Lipophilicity.csv")
esol <- read.csv("C:/Users/thechanceyman/Documents/Research/Data/Drug Design/ESOL/esol.csv")
freesolv <- read.csv("C:/Users/thechanceyman/Documents/Research/Data/Drug Design/FreeSolv/freesolv.csv")
#combine data
all_data <- list(lipo, freesolv, esol)
names(all_data[[1]])[2] <- "resp"
names(all_data[[3]])[9] <- "resp"
names(all_data[[2]])[4] <- "resp"
#type <- c("lower", "lower", "upper")
type <- c("two-sided", "two-sided", "two-sided")
res <- cov_color <- test <- list()
#par(mfrow = c(3,1))
for(i in 1:length(all_data)){
bit_mat <- convert_smiles(all_data[[i]]$smiles)
#data frame form
data <- cbind(all_data[[i]]$resp, bit_mat)
names(data)[1] <- "resp"
set.seed(2020)
n <- nrow(data)
ratio <- .975
samp <- sample(1:n, ratio*n)
train <- data[samp,]
test[[i]] <- data[-samp,]
res[[i]] <- rfint(resp~., train_data = train, test_data = test[[i]], concise = FALSE, interval_type = type[i])
cov_color[[i]] <- (test[[i]]$resp <= res[[i]]$int[[1]][,2])*(test[[i]]$resp>= res[[i]]$int[[1]][,1])
}
for(i in 1:length(all_data)){
#changing to color
range_pred <- range(res[[i]]$int)
range_true <- range(test[[i]]$resp)
lim <- .5
cov_color[[i]][cov_color[[i]] == 1] <- "black"
cov_color[[i]][cov_color[[i]] == 0] <- "red"
p_color <- rep("black", times = nrow(test[[i]]))
p_color[res[[i]]$int[[1]][,1] > lim] <- "skyblue"
#segments
#plotting intervals vs true
plot(x = res[[i]]$preds[[1]], y = test[[i]]$resp, pch = 20,
ylab = "true", xlab = "predicted", ylim = range_true, xlim = range_pred)
abline(a = 0, b = 1)
segments(x0 = res[[i]]$int[[1]][,1], x1 = res[[i]]$int[[1]][,2],
y1 = test[[i]]$resp, y0 = test[[i]]$resp,
col = cov_color[[i]], lwd = .5)
}
#points(x = res$preds[[1]], y = test$lipo, pch = 20, col = p_color)
#one sided for freesolv data
alpha_vec <- seq(.01,.99,length.out = 33)
int <- rep(0, times = 2*length(alpha_vec))
dim(int) <- c(length(alpha_vec), 2)
track <- 1
k <- 5
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
int[track,] <- unlist(rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha)$int$Zhang)
track <- track + 1
}
int[,1] <- -100
plot(x = int[,2], y = 1-alpha_vec, pch = 20,
ylab = expression((1-alpha)), xlab = "upper one-sided interval", ylim = c(0,1), xlim = c(-3,3))
segments(x0 = int[,1], x1 = int[,2],
y1 = 1-alpha_vec, y0 = 1-alpha_vec,
lwd = .5)
abline(v = -.5, lty = 2, col = "red")
#checking calibration of probabilities...
#insert code here...
#one sided for freesolv data
alpha_vec <- seq(.01,.48,length.out = 33)
k <- 1:100
method_vec <- c("Zhang", "quantile", "Romano")
int <- vector(mode = "list", length = length(method_vec))
for(m in 1:length(int)){
int[[m]] <- matrix(0, nrow = length(k), ncol = length(alpha_vec))
}
track <- 1
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
res <- piRF::rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha, method = method_vec)
for(j in 1:length(method_vec)){
int[[j]][,track] <- unlist(res$int[[j]][,2])
}
track <- track + 1
print(alpha)
}
#need to check actual coverage with intervals generated
probs <- list()
coverage <- list()
for(j in 1:length(method_vec)){
thresh <- -0.5
alpha_mat <- matrix(alpha_vec, ncol = length(alpha_vec), nrow = length(k), byrow = TRUE)
keep <- int[[j]] <= thresh
keep_val <- keep*alpha_mat
keep_val[keep_val == 0] = 1.1
probs[[j]] <- 1 - apply(keep_val, FUN = min, MARGIN = 1)
test_mat <- matrix(test2$resp, nrow = nrow(test2), ncol = length(alpha_vec))
coverage[[j]] <- apply(test_mat > int[[j]], FUN = mean, MARGIN = 2)
}
#undercoverage for qunatile and Zhang because one sided intervals not currently implemented...
#method for changing to one sided interval is flawed.
plot(x = coverage[[1]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[2]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[3]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
alpha_vec <- seq(.01,.97,length.out = 33)
alpha_vec
#checking calibration of probabilities...
#insert code here...
#one sided for freesolv data
alpha_vec <- seq(.01,.97,length.out = 33)
k <- 1:100
method_vec <- c("Zhang", "quantile", "Romano")
int <- vector(mode = "list", length = length(method_vec))
for(m in 1:length(int)){
int[[m]] <- matrix(0, nrow = length(k), ncol = length(alpha_vec))
}
track <- 1
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
res <- piRF::rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha, method = method_vec)
for(j in 1:length(method_vec)){
int[[j]][,track] <- unlist(res$int[[j]][,2])
}
track <- track + 1
print(alpha)
}
#need to check actual coverage with intervals generated
probs <- list()
coverage <- list()
for(j in 1:length(method_vec)){
thresh <- -0.5
alpha_mat <- matrix(alpha_vec, ncol = length(alpha_vec), nrow = length(k), byrow = TRUE)
keep <- int[[j]] <= thresh
keep_val <- keep*alpha_mat
keep_val[keep_val == 0] = 1.1
probs[[j]] <- 1 - apply(keep_val, FUN = min, MARGIN = 1)
test_mat <- matrix(test2$resp, nrow = nrow(test2), ncol = length(alpha_vec))
coverage[[j]] <- apply(test_mat > int[[j]], FUN = mean, MARGIN = 2)
}
#undercoverage for qunatile and Zhang because one sided intervals not currently implemented...
#method for changing to one sided interval is flawed.
plot(x = coverage[[1]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[2]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[3]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1))
abline(a = 0, b = 1)
plot(x = coverage[[1]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1), ylab = expression(alpha))
abline(a = 0, b = 1)
plot(x = coverage[[2]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1), ylab = expression(alpha))
abline(a = 0, b = 1)
plot(x = coverage[[3]], y = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1), ylab = expression(alpha))
abline(a = 0, b = 1)
plot(y = coverage[[1]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[1]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[2]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[3]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
alpha_vec <- seq(.01,.97,length.out = 33)
k <- 1:100
method_vec <- c("Zhang", "quantile", "Romano", "Roy")
int <- vector(mode = "list", length = length(method_vec))
for(m in 1:length(int)){
int[[m]] <- matrix(0, nrow = length(k), ncol = length(alpha_vec))
}
track <- 1
for(alpha in alpha_vec){
test2 <- data[k,]
train2 <- data[-k,]
res <- piRF::rfint(resp~., train_data = train2, test_data = test2,
interval_type = "upper", alpha = alpha, method = method_vec)
for(j in 1:length(method_vec)){
int[[j]][,track] <- unlist(res$int[[j]][,2])
}
track <- track + 1
print(alpha)
}
#need to check actual coverage with intervals generated
probs <- list()
coverage <- list()
for(j in 1:length(method_vec)){
thresh <- -0.5
alpha_mat <- matrix(alpha_vec, ncol = length(alpha_vec), nrow = length(k), byrow = TRUE)
keep <- int[[j]] <= thresh
keep_val <- keep*alpha_mat
keep_val[keep_val == 0] = 1.1
probs[[j]] <- 1 - apply(keep_val, FUN = min, MARGIN = 1)
test_mat <- matrix(test2$resp, nrow = nrow(test2), ncol = length(alpha_vec))
coverage[[j]] <- apply(test_mat > int[[j]], FUN = mean, MARGIN = 2)
}
#undercoverage for qunatile and Zhang because one sided intervals not currently implemented...
#method for changing to one sided interval is flawed.
plot(y = coverage[[1]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[2]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[3]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[1]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[2]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[3]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[4]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
par(mfrow = c(2,2))
plot(y = coverage[[1]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[2]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[3]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
plot(y = coverage[[4]], x = alpha_vec, pch = 20, ylim = c(0,1), xlim = c(0,1),
xlab = expression(alpha), ylab = "coverage")
abline(a = 0, b = 1)
library(devtools)
check()
release()

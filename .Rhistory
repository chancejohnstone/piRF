library(devtools)
getwd()
document()
document()
library(devtools)
getwd()
document()
setwd("..")
install("piRF")
library(piRF)
rfint
?rfint
n <- 1000
ratio <- 2/3
p <- 10
full_n <- n*1/ratio
x_data <- data_gen(full_n)
colnames(x_data) <- paste0("X", 1:p)
response <- linear_func(x_data) + rnorm(full_n, 0, 1)
full_data <- cbind(response, x_data)
#train/test datasets
subset <- sample(1:full_n, size = round(ratio*full_n))
train <- as.data.frame(full_data[subset,])
test <- as.data.frame(full_data[-subset,])
rfint(formula = "response ~ .", train_data = train, test_data = test, method = c("Zhang", "Roy", "Romano", "HDI", "Tung", "Ghosal", "quantile"))
source("C:/Users/thechanceyman/Documents/RFIntervals/R/Simulation Functions.R")
source("C:/Users/thechanceyman/Documents/RFIntervals/R/Simulation Functions.R")
n <- 100
ratio <- 2/3
p <- 10
full_n <- n*1/ratio
x_data <- data_gen(full_n)
colnames(x_data) <- paste0("X", 1:p)
response <- linear_func(x_data) + rnorm(full_n, 0, 1)
full_data <- cbind(response, x_data)
#train/test datasets
subset <- sample(1:full_n, size = round(ratio*full_n))
train <- as.data.frame(full_data[subset,])
test <- as.data.frame(full_data[-subset,])
library(piRF)
hold <- rfint(formula = "response ~ .", train_data = train, test_data = test, method = c("Zhang", "Roy", "Romano", "HDI", "Tung", "Ghosal", "quantile"))
library(parallel)
hold <- rfint(formula = "response ~ .", train_data = train, test_data = test, method = c("Zhang", "Roy", "Romano", "HDI", "Tung", "Ghosal", "quantile"))
library(ranger)
hold <- rfint(formula = "response ~ .", train_data = train, test_data = test, method = c("Zhang", "Roy", "Romano", "HDI", "Tung", "Ghosal", "quantile"))
document()
library(devtools)
getwd()
document()
setwd("..")
install("piRF")
?rfint
hold <- rfint(formula = "response ~ .", train_data = train, test_data = test, method = c("Zhang", "Roy", "Romano", "HDI", "Tung", "Ghosal", "quantile"))
?piRF
library(piRF)
?rfint
library(piRF)
getPILength <- function(PI){
#average PI length across each set of predictions
l <- PI[,2] - PI[,1]
avg_l <- mean(l)
return(avg_l)
}
getCoverage <- function(x, response){
#output coverage for test data
coverage <- sum((response >= x[,1]) * (response <= x[,2]))/length(response)
return(coverage)
}
#import airfoil self noise dataset
data(airfoil)
#generate train and test data
ratio <- .9
nrow <- nrow(airfoil)
n <- floor(nrow*ratio)
samp <- sample(1:nrow, size = n)
train <- airfoil[samp,]
test <- airfoil[-samp,]
res <- rfint(pressure ~ . , train_data = train, test_data = test,
method = c("quantile", "Zhang", "Tung", "Romano", "Roy", "HDI", "Ghosal"))
res
coverage <- sapply(res, FUN = getCoverage, response = test$pressure)
coverage
length <- sapply(res, FUN = getPILength)
length
data(package = "piRF")
library(devtools)
getwd()
document()
setwd("..")
install("~/piRF")
install("piRF")
library(piRF)
library(piRF)
getPILength <- function(PI){
#average PI length across each set of predictions
l <- PI[,2] - PI[,1]
avg_l <- mean(l)
return(avg_l)
}
getCoverage <- function(x, response){
#output coverage for test data
coverage <- sum((response >= x[,1]) * (response <= x[,2]))/length(response)
return(coverage)
}
#import airfoil self noise dataset
data(airfoil)
#generate train and test data
ratio <- .9
nrow <- nrow(airfoil)
n <- floor(nrow*ratio)
samp <- sample(1:nrow, size = n)
train <- airfoil[samp,]
test <- airfoil[-samp,]
#generate prediction intervals
res <- rfint(pressure ~ . , train_data = train, test_data = test,
method = c("quantile", "Zhang", "Tung", "Romano", "Roy", "HDI", "Ghosal"))
#empirical coverage, and average prediction interval length for each method
coverage <- sapply(res, FUN = getCoverage, response = test$pressure)
coverage
length <- sapply(res, FUN = getPILength)
length
getwd()
document()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
library(piRF)
getPILength <- function(PI){
#average PI length across each set of predictions
l <- PI[,2] - PI[,1]
avg_l <- mean(l)
return(avg_l)
}
getCoverage <- function(x, response){
#output coverage for test data
coverage <- sum((response >= x[,1]) * (response <= x[,2]))/length(response)
return(coverage)
}
#import airfoil self noise dataset
data(airfoil)
#generate train and test data
ratio <- .9
nrow <- nrow(airfoil)
n <- floor(nrow*ratio)
samp <- sample(1:nrow, size = n)
train <- airfoil[samp,]
test <- airfoil[-samp,]
#generate prediction intervals
res <- rfint(pressure ~ . , train_data = train, test_data = test,
method = c("quantile", "Zhang", "Tung", "Romano", "Roy", "HDI", "Ghosal"))
#empirical coverage, and average prediction interval length for each method
coverage <- sapply(res, FUN = getCoverage, response = test$pressure)
coverage
length <- sapply(res, FUN = getPILength)
length
?combine
?combined
piRF::rfint()
piRF::rfint

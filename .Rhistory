return(avg_l)
}
getCoverage <- function(x, response){
#output coverage for test data
coverage <- sum((response >= x[,1]) * (response <= x[,2]))/length(response)
return(coverage)
}
#import airfoil self noise dataset
data(airfoil)
#generate train and test data
ratio <- .975
nrow <- nrow(airfoil)
n <- floor(nrow*ratio)
samp <- sample(1:nrow, size = n)
train <- airfoil[samp,]
test <- airfoil[-samp,]
#generate prediction intervals
res <- rfint(pressure ~ . , train_data = train, test_data = test,
method = c("quantile", "Zhang", "Tung", "Romano", "Roy", "HDI", "Ghosal"), concise = FALSE)
#empirical coverage, and average prediction interval length for each method
coverage <- sapply(res, FUN = getCoverage, response = test$pressure)
coverage
length <- sapply(res, FUN = getPILength)
length
#plotting intervals and predictions
par(mfrow = c(2,2))
for(i in 1:7){
col <- ((test$pressure >= res$int[[i]][,1]) * (test$pressure <= res$int[[i]][,2])-1)*(-1)+1
plot(x = res$preds[[i]], y = test$pressure, pch = 20,
col = "black", ylab = "true", xlab = "predicted", main = method_vec[i])
abline(a = 0, b = 1)
segments(x0 = res$int[[i]][,1], x1 = res$int[[i]][,2], y1 = test$pressure, y0 = test$pressure, lwd = 1, col = col)
}
test
names(test)
#functions to get average length and average coverage of output
getPILength <- function(x){
#average PI length across each set of predictions
l <- x[,2] - x[,1]
avg_l <- mean(l)
return(avg_l)
}
getCoverage <- function(x, response){
#output coverage for test data
coverage <- sum((response >= x[,1]) * (response <= x[,2]))/length(response)
return(coverage)
}
#import airfoil self noise dataset
data(airfoil)
#generate train and test data
ratio <- .975
nrow <- nrow(airfoil)
n <- floor(nrow*ratio)
samp <- sample(1:nrow, size = n)
train <- airfoil[samp,]
test <- airfoil[-samp,]
#generate prediction intervals
res <- rfint(pressure ~ . , train_data = train, test_data = test,
method = c("quantile", "Zhang", "Tung", "Romano", "Roy", "HDI", "Ghosal"), concise = FALSE)
#empirical coverage, and average prediction interval length for each method
coverage <- sapply(res$int, FUN = getCoverage, response = test$pressure)
coverage
length <- sapply(res, FUN = getPILength)
length
#plotting intervals and predictions
par(mfrow = c(2,2))
for(i in 1:7){
col <- ((test$pressure >= res$int[[i]][,1]) * (test$pressure <= res$int[[i]][,2])-1)*(-1)+1
plot(x = res$preds[[i]], y = test$pressure, pch = 20,
col = "black", ylab = "true", xlab = "predicted", main = method_vec[i])
abline(a = 0, b = 1)
segments(x0 = res$int[[i]][,1], x1 = res$int[[i]][,2], y1 = test$pressure, y0 = test$pressure, lwd = 1, col = col)
}
#functions to get average length and average coverage of output
getPILength <- function(x){
#average PI length across each set of predictions
l <- x[,2] - x[,1]
avg_l <- mean(l)
return(avg_l)
}
getCoverage <- function(x, response){
#output coverage for test data
coverage <- sum((response >= x[,1]) * (response <= x[,2]))/length(response)
return(coverage)
}
#import airfoil self noise dataset
data(airfoil)
#generate train and test data
ratio <- .975
nrow <- nrow(airfoil)
n <- floor(nrow*ratio)
samp <- sample(1:nrow, size = n)
train <- airfoil[samp,]
test <- airfoil[-samp,]
#generate prediction intervals
res <- rfint(pressure ~ . , train_data = train, test_data = test,
method = c("quantile", "Zhang", "Tung", "Romano", "Roy", "HDI", "Ghosal"), concise = FALSE)
#empirical coverage, and average prediction interval length for each method
coverage <- sapply(res$int, FUN = getCoverage, response = test$pressure)
coverage
length <- sapply(res$int, FUN = getPILength)
length
#plotting intervals and predictions
par(mfrow = c(2,2))
for(i in 1:7){
col <- ((test$pressure >= res$int[[i]][,1]) * (test$pressure <= res$int[[i]][,2])-1)*(-1)+1
plot(x = res$preds[[i]], y = test$pressure, pch = 20,
col = "black", ylab = "true", xlab = "predicted", main = method_vec[i])
abline(a = 0, b = 1)
segments(x0 = res$int[[i]][,1], x1 = res$int[[i]][,2], y1 = test$pressure, y0 = test$pressure, lwd = 1, col = col)
}
document()
library(devtools)
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
document(0)
document()
library(devtools)
library(devtools)
document()
setwd("..")
install(piRF)
install("piRF")
setwd("~/piRF")
document()
setwd("..")
install("piRF")
setwd("~/piRF")
document()
setwd("..")
install("piRF")
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
setwd("..")
library(devtools)
document()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(Rdpack)
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(devtools)
library(piRF)
?rfint
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(devtools)
library(piRF)
?rfint
setwd("~/piRF")
document()
setwd("..")
install("piRF")
install("piRF")
install("piRF")
install("piRF")
install.packages("glue")
install.packages("glue")
install("piRF")
library(devtools)
install("piRF")
library(piRF)
library(piRF)
library(devtools)
?rfint
library(rfinterval)
?rfinterval
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(devtools)
install("piRF")
library(devtools)
library(piRF)
?rfint
setwd("~/piRF")
document()
install("piRF")
setwd("..")
install("piRF")
library(devtools)
library(piRF)
?airfoil
piRF::CQRF()
piRF::CQRF
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(piRF)
?rfint
piRF::boostStage
?boostStage
library(devtools)
?manual
devtools::build_manual()
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
setwd("~/piRF")
build_manual()
build_manual()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
build_manual()
setwd("~/piRF")
build_manual()
build_manual()
document()
build_manual()
?ranger
document()
document()
build_manual()
?rfint
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
library(devtools)
document()
build_manual()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
build_manual()
setwd("~/piRF")
build_manual()
build_manual()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
build_manual()
setwd("~/piRF")
build_manual()
build_manual()
setwd("..")
setwd("~/piRF")
document()
build_manual()
document()
build_manual()
build_manual()
setwd("..")
install("piRF")
setwd("~/piRF")
document()
build_manual()
?ranger
?rfint
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
hold <- rfint(response ~ ., train_data = train, test_data = test, method = c("Ghosal"))
airfoil
hold <- rfint(pressure ~ ., train_data = airfoil, test_data = airfoil[1,], method = c("Ghosal"))
?rfint
library(piRF)
#functions to get average length and average coverage of output
getPILength <- function(x){
#average PI length across each set of predictions
l <- x[,2] - x[,1]
avg_l <- mean(l)
return(avg_l)
}
getCoverage <- function(x, response){
#output coverage for test data
coverage <- sum((response >= x[,1]) * (response <= x[,2]))/length(response)
return(coverage)
}
#import airfoil self noise dataset
data(airfoil)
method_vec <- c("quantile", "Zhang", "Tung", "Romano", "Roy", "HDI", "Ghosal")
#generate train and test data
ratio <- .975
nrow <- nrow(airfoil)
n <- floor(nrow*ratio)
samp <- sample(1:nrow, size = n)
train <- airfoil[samp,]
test <- airfoil[-samp,]
#generate prediction intervals
res <- rfint(pressure ~ . , train_data = train, test_data = test,
method = method_vec,
concise= FALSE)
res
res$int$Ghosal
setwd("~/piRF")
document()
library(devtools)
setwd("..")
install("piRF")
library(piRF)
piRF::airfoil
piRF:::.packageName
piRF:::.__NAMESPACE__.
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?piRF
?rfint
library(devtools)
setwd("~/piRF")
document()
document()
document()
document()
document()
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?ranger
?rfint
?rfinterval
?rfint
getwd()
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?rfinterval
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
piRF::rfint()
piRF::rfint
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?rfinterval
?rfint
?rfinterval
?rfint
library(devtools)
setwd("~/piRF")
document()
document()
document()
document()
setwd("..")
install("piRF")
?rfinte
?rfinterval
library(piRF)
rfint
?rfint
?rfint
library(piRF)
?rfint
?ranger
?rfinterval
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?ranger
?rfinterval
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?rfinterval
getwd()
check("piRF")
library(devtools)
check("piRF")
install_deps(dependencies = TRUE)
getwd()
setwd("piRF")
install_deps(dependencies = TRUE)
check("piRF")
check()
setwd("..")
check("piRF")
library(devtools)
setwd("piRF")
document()
setwd("..")
install("piRF")
setwd("..")
check("piRF")
setwd("piRF")
setwd("~/piRF")
getwd()
check("piRF")
check()
check()
check()

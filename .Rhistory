setwd("..")
library(devtools)
document()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(Rdpack)
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(devtools)
library(piRF)
?rfint
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(devtools)
library(piRF)
?rfint
setwd("~/piRF")
document()
setwd("..")
install("piRF")
install("piRF")
install("piRF")
install("piRF")
install.packages("glue")
install.packages("glue")
install("piRF")
library(devtools)
install("piRF")
library(piRF)
library(piRF)
library(devtools)
?rfint
library(rfinterval)
?rfinterval
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(devtools)
install("piRF")
library(devtools)
library(piRF)
?rfint
setwd("~/piRF")
document()
install("piRF")
setwd("..")
install("piRF")
library(devtools)
library(piRF)
?airfoil
piRF::CQRF()
piRF::CQRF
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(piRF)
?rfint
piRF::boostStage
?boostStage
library(devtools)
?manual
devtools::build_manual()
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
setwd("~/piRF")
build_manual()
build_manual()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
build_manual()
setwd("~/piRF")
build_manual()
build_manual()
document()
build_manual()
?ranger
document()
document()
build_manual()
?rfint
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
library(devtools)
document()
build_manual()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
build_manual()
setwd("~/piRF")
build_manual()
build_manual()
setwd("~/piRF")
document()
setwd("..")
install("piRF")
build_manual()
setwd("~/piRF")
build_manual()
build_manual()
setwd("..")
setwd("~/piRF")
document()
build_manual()
document()
build_manual()
build_manual()
setwd("..")
install("piRF")
setwd("~/piRF")
document()
build_manual()
?ranger
?rfint
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
hold <- rfint(response ~ ., train_data = train, test_data = test, method = c("Ghosal"))
airfoil
hold <- rfint(pressure ~ ., train_data = airfoil, test_data = airfoil[1,], method = c("Ghosal"))
?rfint
library(piRF)
#functions to get average length and average coverage of output
getPILength <- function(x){
#average PI length across each set of predictions
l <- x[,2] - x[,1]
avg_l <- mean(l)
return(avg_l)
}
getCoverage <- function(x, response){
#output coverage for test data
coverage <- sum((response >= x[,1]) * (response <= x[,2]))/length(response)
return(coverage)
}
#import airfoil self noise dataset
data(airfoil)
method_vec <- c("quantile", "Zhang", "Tung", "Romano", "Roy", "HDI", "Ghosal")
#generate train and test data
ratio <- .975
nrow <- nrow(airfoil)
n <- floor(nrow*ratio)
samp <- sample(1:nrow, size = n)
train <- airfoil[samp,]
test <- airfoil[-samp,]
#generate prediction intervals
res <- rfint(pressure ~ . , train_data = train, test_data = test,
method = method_vec,
concise= FALSE)
res
res$int$Ghosal
setwd("~/piRF")
document()
library(devtools)
setwd("..")
install("piRF")
library(piRF)
piRF::airfoil
piRF:::.packageName
piRF:::.__NAMESPACE__.
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?piRF
?rfint
library(devtools)
setwd("~/piRF")
document()
document()
document()
document()
document()
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?ranger
?rfint
?rfinterval
?rfint
getwd()
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?rfinterval
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
piRF::rfint()
piRF::rfint
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?rfinterval
?rfint
?rfinterval
?rfint
library(devtools)
setwd("~/piRF")
document()
document()
document()
document()
setwd("..")
install("piRF")
?rfinte
?rfinterval
library(piRF)
rfint
?rfint
?rfint
library(piRF)
?rfint
?ranger
?rfinterval
setwd("~/piRF")
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
setwd("~/piRF")
document()
library(devtools)
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?ranger
?rfinterval
library(devtools)
setwd("~/piRF")
document()
setwd("..")
install("piRF")
library(piRF)
?rfint
?rfinterval
getwd()
check("piRF")
library(devtools)
check("piRF")
install_deps(dependencies = TRUE)
getwd()
setwd("piRF")
install_deps(dependencies = TRUE)
check("piRF")
check()
setwd("..")
check("piRF")
library(devtools)
setwd("piRF")
document()
setwd("..")
install("piRF")
setwd("..")
check("piRF")
setwd("piRF")
setwd("~/piRF")
getwd()
check("piRF")
check()
check()
check()
library(devtools)
check()
document()
document()
document()
document()
setwd("..")
install("piRF")
setwd("~/piRF")
check()
document()
setwd("..")
install("piRF")
setwd("~/piRF")
check()
document()
check()
document()
setwd("..")
install("piRF")
setwd("~/piRF")
check()
document()
document()
check()
document()
check()
document()
check()
?detectCores
?ranger::predict
document()
check()
data(airfoil)
res <- ranger(pressure~., data = airfoil)
library(ranger)
res <- ranger(pressure~., data = airfoil)
ranger::predict(res)
predict.ranger(res)
predict(res)
predict(res, res)
predict(res, res[,-6])
predict(res, airfoil)
predict.ranger(res, airfoil)
document()
check()
document()
check()
document()
check()
?quantile
?min
?predict
?quantile
document()
check()
?hdr
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
?globalVariables
document()
check()
document()
check()
document()
check()
document()
?getDoparWorkers
document()
check()
document()
check()
document()
check()
document()
check()
document()
?getdoparWorkers
?getdoParWorkers
library(parallel)
?getdoParWorkers
library(foreach)
?makeCluster
?registerDoParallel
?detectCores
?makeCluster
?registerDoParallel
?registerDoSEQ
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
?rfinteral
?rfinteral
?rfinterval
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
document()
check()
?use_package
document()
check()
document()
check()
?getDoParWorkers
document()
check()
document()
check()
document()
check()
check()
check()
check()
check()
check()
check()
?parse.formula
check()
check()
check()
?parse.formula
check()
check()
check()
install.packages("ranger")
install.packages("ranger")
library(devtools)
check()
check()
check()
check()
check()
